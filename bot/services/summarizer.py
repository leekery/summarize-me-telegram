from typing import List, Dict
from openai import OpenAI
from config import settings
from bot.utils.text import normalize_for_telegram

DEEPSEEK_API_KEY = settings.deepseek_api_key
DEEPSEEK_BASE_URL = "https://api.deepseek.com"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

SYSTEM_PROMPT = (
    "–¢—ã –¥–µ–ª–∞–µ—à—å –∫—Ä–∞—Ç–∫–∏–µ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏. –°—Ç–∏–ª—å ‚Äî –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ: "
    "–∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ. –£—á–∏—Ç—ã–≤–∞–π –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–§–æ—Ç–æ: ‚Ä¶¬ª, ¬´–°—Ç–∏–∫–µ—Ä üòä¬ª). "
    "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ–∞–º–±—É–ª—É –∏ –≤—ã–≤–æ–¥—ã, –Ω–µ –æ–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º, –Ω–µ –æ–ø–∏—Å—ã–≤–∞–π, —á—Ç–æ —Ç—ã –ò–ò. "
    "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: –æ–±—ã—á–Ω—ã–π –ü–õ–ï–ô–ù-–¢–ï–ö–°–¢ –±–µ–∑ Markdown –∏ HTML, –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ 3‚Äì6 –ø—É–Ω–∫—Ç–æ–≤."
)

async def summarize_messages(msgs: List[Dict]) -> str:
    if not DEEPSEEK_API_KEY:
        return _fallback_summary(msgs)

    context = "\n".join(f"{m['user_name']}: {m['text']}" for m in msgs)
    user_prompt = (
        "–í–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî ¬´–ò–º—è: —Ç–µ–∫—Å—Ç¬ª). "
        "–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É:\n\n"
        f"{context}\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É:\n"
        "1) –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ –∑–≤—ë–∑–¥–æ—á–µ–∫, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π –∏ —Ç–µ–≥–æ–≤.\n"
        "2) –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (1., 2., 3., ‚Ä¶) –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫.\n"
        "3) –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –º–µ–¥–∏–∞, –∏—Å–ø–æ–ª—å–∑—É–π –≤–∏–¥ ¬´–§–æ—Ç–æ: ‚Ä¶¬ª, ¬´–°—Ç–∏–∫–µ—Ä üòä¬ª, ¬´–í–∏–¥–µ–æ: ‚Ä¶¬ª.\n"
    )

    try:
        resp = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_prompt},
            ],
            stream=False,
        )
        raw = resp.choices[0].message.content or ""
        return normalize_for_telegram(raw)

    except Exception as e:
        return f"(–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)\n{_fallback_summary(msgs)}\n\n{e}"

def _fallback_summary(msgs: List[Dict]) -> str:
    lines = [f"{m['user_name']}: {m['text']}" for m in msgs[-6:]]
    numbered = "\n".join(f"{i+1}. {line}" for i, line in enumerate(lines))
    return f"–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:\n{numbered}"